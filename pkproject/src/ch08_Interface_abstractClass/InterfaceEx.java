package ch08_Interface_abstractClass;
//인터페이스는 코드의 종속성을 낮춘다
//코드의 종속성은 각각의 메서드 간의 결합도를 의마
/* 인터페이스를 활용할 경우, 하나의 메서드를 수정하면 다른 메서드도 변경
  하는 상황을 줄여줌 */
//변경에 강함 , 확장에는 열려 있고, 변경에는 닫혀 있다.

/* 인터페이스는 상수(public static final)는 여러 구현 클래스에서 공유하는 용도
  -> 코드의 중복을 줄임, 일관성을 유지 */

//인터페이스는 호환성을 높임

/* 소프트웨어 설계원칙 중에 개방-폐쇄 원칙이 있다
 * 응집도(Cohesion):클래스나 모듈 내부의 기능이 얼마나 밀접하게
   관련되어 있는지 / 응집도가 높을 수록 각 클래스,모듈이 하나의 기능을 가짐
 * 결합도(Coupling):메서드 간,클래스 간의 관계가 얼마나 강하게 
   결합이 되어 있는지 / 결합도가 낮을 수록 각 클래스는 서로 독립적이며,
   변경이 발생되었을 때 다른 클래스에 미치는 영향이 적어짐
 -> 좋은 소프트웨어는 응집도는 높이고, 결합도는 낮춘다
 	유지 보수, 재사용성이 좋아짐
*/

public interface InterfaceEx {
	//상수(constant)
	/*[접근제한자(public) modifier(static final) 생략돼 있음] 타입 필드명
	public static final int a = 100; */
	int a = 100;
	
	//생성자 X 
	//RemoteControl_P373(){} > interface는 생성자를 못 가짐
	
	//추상메서드
	/*[접근제한자][제한자] 리턴유형 메서드명(매개변수 리스트);
	 기본적으로 interface의 메서드는 추상메서드로 인식
	 public abstract void test(); 
	  >추상메서드는 바디를 가질 수 없음(중괄호{}) 
	  >interface에서는 public abstract를 생략 가능 */
	
}